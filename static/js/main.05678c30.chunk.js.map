{"version":3,"sources":["api/index.js","components/Chart/Chart.js","components/Cards/Cards.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","components/CountryPicker/CountryPicker.module.css"],"names":["url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","modifiedData","fetchDailyData","map","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchApi","barChart","labels","datasets","label","backgroundColor","value","options","legend","display","title","text","lineChart","borderColor","fill","className","styles","chart","Cards","props","start","end","duration","separator","Date","toDateString","CountryPicker","setCountries","size","defaultValue","onChange","e","handleCountryChange","target","i","key","App","state","FetchData","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.05678c30.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nconst fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  const {\r\n    data: { confirmed, recovered, deaths, lastUpdate },\r\n  } = await axios.get(changeableUrl);\r\n\r\n  const modifiedData = {\r\n    confirmed,\r\n    recovered,\r\n    deaths,\r\n    lastUpdate,\r\n  };\r\n  return modifiedData;\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  // const { data } = await axios.get(`${url}/daily`);\r\n\r\n  // // console.log(data);\r\n\r\n  // const modifiedData = data.map((qwe) => ({\r\n  //   confirmed: qwe.confirmed.total,\r\n  //   deaths: qwe.deaths.total,\r\n  //   date: qwe.reportDate,\r\n  // }));\r\n  // console.log(modifiedData);\r\n  // return modifiedData;\r\n\r\n  const { data } = await axios.get(`${url}/daily`);\r\n  // console.log(data);\r\n\r\n  return data.map(({ confirmed, deaths, reportDate }) => ({\r\n    confirmed: confirmed.total,\r\n    deaths: deaths.total,\r\n    reportDate,\r\n  }));\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  const {\r\n    data: { countries },\r\n  } = await axios.get(`${url}/countries`);\r\n  return countries.map((country) => country.name);\r\n};\r\n\r\nexport default fetchData;\r\n","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { fetchDailyData } from \"../../api/index\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\nconst Chart = ({ data, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      const data = await fetchDailyData();\r\n\r\n      setDailyData(data);\r\n    };\r\n\r\n    fetchApi();\r\n  }, []);\r\n\r\n  const barChart = data.confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [\r\n              data.confirmed.value,\r\n              data.recovered.value,\r\n              data.deaths.value,\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const lineChart = dailyData[0] ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ reportDate }) => reportDate),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            // backgroundColor: \"rgba(99, 239, 246, 0.4)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.chart}>\r\n      <div className={`container pb-5`}>{country ? barChart : lineChart}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Countup from \"react-countup\";\r\n\r\nconst Cards = (props) => {\r\n  if (!props.data.confirmed) {\r\n    return \"....loading\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"container py-5\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\">\r\n          <div className=\"card text-white bg-danger mb-3\">\r\n            <div className=\"card-header\">Infected</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">\r\n                <Countup\r\n                  start={0}\r\n                  end={props.data.confirmed.value}\r\n                  duration={1.5}\r\n                  separator=\",\"\r\n                />\r\n              </h5>\r\n              <p className=\"card-text\">\r\n                {\" \"}\r\n                {new Date(props.data.lastUpdate).toDateString()}\r\n              </p>\r\n              <p className=\"card-text\">Number of Active cases of COVID-19</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-sm\">\r\n          <div className=\"card text-white bg-success mb-3\">\r\n            <div className=\"card-header\">Recovered</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">\r\n                <Countup\r\n                  start={0}\r\n                  end={props.data.recovered.value}\r\n                  duration={1.5}\r\n                  separator=\",\"\r\n                />\r\n              </h5>\r\n              <p className=\"card-text\">\r\n                {\" \"}\r\n                {new Date(props.data.lastUpdate).toDateString()}\r\n              </p>\r\n              <p className=\"card-text\">Number of Recovered cases</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-sm\">\r\n          <div className=\"card text-white bg-secondary mb-3\">\r\n            <div className=\"card-header\">Deaths</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">\r\n                <Countup\r\n                  start={0}\r\n                  end={props.data.deaths.value}\r\n                  duration={1.5}\r\n                  separator=\",\"\r\n                />\r\n              </h5>\r\n              <p className=\"card-text\">\r\n                {new Date(props.data.lastUpdate).toDateString()}\r\n              </p>\r\n              <p className=\"card-text\">Total deaths due to Covid-19</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport { fetchCountries } from \"../../api\";\r\nimport { useState, useEffect } from \"react\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nconst CountryPicker = (props) => {\r\n  const [countries, setCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n    fetchApi();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.size}>\r\n      <select\r\n        defaultValue=\"\"\r\n        className={`custom-select container`}\r\n        onChange={(e) => props.handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from \"react\";\nimport Chart from \"./components/Chart/Chart\";\nimport Cards from \"./components/Cards/Cards\";\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\nimport FetchData from \"./api/index\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const data = await FetchData();\n\n    this.setState({ data: data });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await FetchData(country);\n\n    this.setState({ data: data, country: country });\n  };\n  render() {\n    return (\n      <div className=\"container \">\n        <Cards data={this.state.data}></Cards>\n        <CountryPicker\n          handleCountryChange={this.handleCountryChange}\n        ></CountryPicker>\n        <Chart data={this.state.data} country={this.state.country}></Chart>\n        <p className=\"copy\">\n          <strong>Copyright © 2020-Till Death Kushagra's Ltd.</strong>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"size\":\"CountryPicker_size__14VUd\"};"],"sourceRoot":""}